local test_utils = require("tests.helpers.test_utils")
local utils = require("denote.core.utils")

describe("denote.core.utils", function()
  before_each(function()
    test_utils.setup_test_env()
  end)
  
  after_each(function()
    test_utils.teardown_test_env()
  end)
  describe("trim", function()
    it("should remove leading and trailing whitespace", function()
      assert.are.equal("hello", utils.trim("  hello  "))
      assert.are.equal("hello world", utils.trim("  hello world  "))
    end)

    it("should handle empty strings", function()
      assert.are.equal("", utils.trim(""))
      assert.are.equal("", utils.trim("   "))
    end)

    it("should handle nil input", function()
      assert.are.equal("", utils.trim(nil))
    end)
  end)

  describe("sanitize", function()
    it("should lowercase and remove special characters", function()
      assert.are.equal("hello world", utils.sanitize("Hello World!"))
      assert.are.equal("test 123", utils.sanitize("Test@123#"))
    end)

    it("should normalize whitespace", function()
      assert.are.equal("hello world", utils.sanitize("hello   world"))
    end)

    it("should handle empty strings", function()
      assert.are.equal("", utils.sanitize(""))
      assert.are.equal("", utils.sanitize(nil))
    end)
  end)

  describe("format_component", function()
    it("should format title components", function()
      assert.are.equal("--hello-world", utils.format_component("hello world", "-"))
      assert.are.equal("--test-note", utils.format_component("Test Note!", "-"))
    end)

    it("should format keyword components", function()
      assert.are.equal("__tag1_tag2", utils.format_component("tag1 tag2", "_"))
    end)

    it("should handle empty strings", function()
      assert.are.equal("", utils.format_component("", "-"))
      assert.are.equal("", utils.format_component("   ", "_"))
    end)
  end)

  describe("generate_timestamp", function()
    it("should generate valid timestamp format", function()
      local timestamp = utils.generate_timestamp()
      assert.is_truthy(timestamp:match("%d%d%d%d%d%d%d%dT%d%d%d%d%d%d"))
    end)
  end)

  describe("identifier_to_date", function()
    it("should convert identifier to readable date", function()
      local date = utils.identifier_to_date("20240601T120000")
      assert.is_truthy(date:match("%[%d%d%d%d%-%d%d%-%d%d"))
    end)

    it("should handle invalid identifiers", function()
      assert.is_nil(utils.identifier_to_date("invalid"))
    end)
  end)
end)